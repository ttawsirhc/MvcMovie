/*
PART 1: GET STARTED WITH ASP.NET CORE MVC
THEORY:
This tutorial teaches ASP.NET Core MVC web development with controllers and views. 
If you're new to ASP.NET Core web development, consider the Razor Pages version of this tutorial, which provides an easier starting point. 
See Choose an ASP.NET Core UI, which compares Razor Pages, MVC, and Blazor for UI development.
This is the first tutorial of a series that teaches ASP.NET Core MVC web development with controllers and views.
At the end of the series, you'll have an app that manages and displays movie data. You learn how to: 
Create a web app; Add and scaffold a model; Work with a database; Add search and validation.

PRACTICE:
1. Prerequisites: Visual Studio Code; C# for Visual Studio Code (latest version); .NET 8.0 SDK
2. The Visual Studio Code instructions use the .NET CLI for ASP.NET Core development functions such as project creation. 
a. You can follow these instructions on macOS, Linux, or Windows and with any code editor.
b. Minor changes may be required if you use something other than Visual Studio Code.
2. Create a web app (Visual Studio Code):
a. The tutorial assumes familiarity with VS Code. For more information, see Getting started with VS Code and Visual Studio Code help.
b. Select New Terminal (or Windows Power Shell) from the Terminal menu to open the integrated terminal.
c. Change to the directory (cd) that will contain the project. The project can be located anywhere. (e.g., C:\Users\ttaws\dotnet\)
d. Run the following commands:
i. dotnet new mvc -o MvcMovie: creates a new ASP.NET Core MVC project in the MvcMovie folder. 
ii. code -r MvcMovie: opens the MvcMovie project folder in the current instance of Visual Studio Code.
e. Visual Studio Code might display a dialog box that asks: Do you trust the authors of the files in this folder?
i. If you trust all files in the parent folder, select Trust the authors of all files in the parent folder.
ii. Select Yes, I trust the authors since the project folder has files generated by .NET.
iii. When Visual Studio Code requests that you add assets to build and debug the project, select Yes.
iv. If Visual Studio Code doesn't offer to add build and debug assets, select View > Command Palette and type ".NET" into the search box.
v. From the list of commands, select the .NET: Generate Assets for Build and Debug command.
vi. Visual Studio Code adds a .vscode folder with generated launch.json and tasks.json files.
3. Run the app (Visual Studio Code):
a. Trust the HTTPS development certificate by running the following command (.NET CLI):
i. dotnet dev-certs https --trust:
A. requires .NET 9 SDK or later on Linux. For Linux on .NET 8.0.401 SDK and earlier, see your Linux distribution's documentation for trusting a certificate.
B. displays the following dialog, provided the certificate was not previously trusted: (Security Warning popup in documentation)
C. Select Yes if you agree to trust the development certificate.
ii. For more information, see the Trust the ASP.NET Core HTTPS development certificate section of the Enforcing SSL article.
iii. For information on trusting the Firefox browser, see Firefox SEC_ERROR_INADEQUATE_KEY_USAGE certificate error.
b. In Visual Studio Code, press Ctrl+F5 (Windows)/^+F5 (macOS) to run the app without debugging.
i. Visual Studio Code: Starts Kestrel; Launches a browser; Navigates to https://localhost:<port#>; displays the Home or Index page
ii. The address bar shows localhost:<port#> and not something like example.com.
iii. The standard hostname for your local computer is localhost. Localhost only serves web requests from the local computer.
c. Launching the app without debugging by selecting Ctrl+F5 allows you to:
i. Make code changes.
ii. Save the file.
iii. Quickly refresh the browser and see the code changes.
d. Close the browser window.
e. In Visual Studio Code, from the Run menu, select Stop Debugging or press Shift+F5 to stop the app.

Visual Studio Code help: Getting started; Debugging; Integrated terminal; Keyboard shortcuts (Linux keyboard shortcuts, Windows keyboard shortcuts)

In the next tutorial in this series, you learn about MVC and start writing some code

NEXT: Add a controller ...
*/